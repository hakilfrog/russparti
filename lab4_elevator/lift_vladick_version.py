import time


class MaxErrorWeight(Exception):
    pass  # print("Error, incorrect weight")


class MinErrorWeight(Exception):
    pass  # print("Error, incorrect weight")


class ElevatorState:
    # weight = 0

    def __init__(self, elevator):
        self.elevator = elevator

    def get_state(self):
        raise NotImplementedError
    # def enter(self, weight):  # –ø–∏—Å–∞–ª —ç—Ç–æ —Å–Ω–∞—á–∞–ª–∞, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–≤—Ä–æ–¥–µ)
    #     pass
    #
    # def exit(self, weight):
    #     pass
    #
    # def go_up(self):
    #     pass
    #
    # def go_down(self):
    #     pass


class EmptyState(ElevatorState):

    def enter(self, weight):
        # try:
        self.elevator.current_weight = weight
        if self.elevator.current_weight > self.elevator.max_weight:
            raise MaxErrorWeight
        elif self.elevator.current_weight < self.elevator.min_weight:
            print("–õ–∏—Ñ—Ç –ø—É—Å—Ç")
            self.elevator.state = EmptyState(self.elevator)
            raise MinErrorWeight
        else:
            self.elevator.state = OccupiedState(self.elevator)

    # except MaxErrorWeight:
    #     print("–ü–µ—Ä–µ–≤–µ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    #
    #
    # except MinErrorWeight:
    #     print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å!")

    def exit(self, weight):
        if self.elevator.current_weight - weight < 0:
            raise MinErrorWeight
        else:
            self.elevator.current_weight -= weight
        print("–õ–∏—Ñ—Ç –ø—É—Å—Ç")

    def go_up(self):
        self.elevator.state = EmptyState(
            self.elevator)  # print("–õ–∏—Ñ—Ç –Ω–∞ —Å–∞–º–æ–º –≤—ã—Å–æ–∫–æ–º —ç—Ç–∞–∂–µ")  # –Ω–∞—Ö—É—è –≤ —ç–º—Ç–∏ —Å—Ç–∞–π—Ç —ç—Ç–æ?

    def go_down(self):
        self.elevator.state = EmptyState(self.elevator)
        #  print("–õ–∏—Ñ—Ç –Ω–∞ —Å–∞–º–æ–º –Ω–∏–∂–Ω–µ–º —ç—Ç–∞–∂–µ") # –Ω–∞—Ö—É—è –≤ —ç–º—Ç–∏ —Å—Ç–∞–π—Ç —ç—Ç–æ?

    def get_state(self):
        return '–û–∂–∏–¥–∞–Ω–∏–µ...'

    def go_to_p(self, floor):
        if self.elevator.current_weight == 0:
            self.elevator.state = IncomingState(self.elevator)
            elevator.go_to_p(floor)


class OccupiedState(ElevatorState):

    def enter(self, weight):
        self.elevator.current_weight += weight
        # self.weight += weight
        # if self.elevator.current_weight + weight > self.elevator.max_weight:
        #     print("–ü–µ—Ä–µ–≤–µ—Å!")
        #     self.elevator.state = EmptyState(self.elevator)
        #     raise ErrorWeight

        # return False

        # elif self.elevator.current_weight + weight < self.elevator.min_weight:
        #     print("–õ–∏—Ñ—Ç –ø—É—Å—Ç")
        #     self.elevator.state = EmptyState(self.elevator)
        #     raise ErrorWeight
        #
        # else:
        #     self.elevator.current_weight += weight

    def exit(self, weight):
        self.elevator.current_weight -= weight
        if self.elevator.current_weight == 0:
            self.elevator.state = EmptyState(self.elevator)

    def go_up(self, floor):
        if self.elevator.min_weight <= self.elevator.current_weight <= self.elevator.max_weight:
            if self.elevator.current_floor == self.elevator.max_floor:
                print("–í—ã—à–µ –Ω–µ–∫—É–¥–∞")
            else:
                self.elevator.current_floor += floor - self.elevator.current_floor
        # elif self.enter(elevator.current_weight):
        #     self.elevator.current_floor += 1 # –≠–¢–û –ß–¢–û –ó–ê –•–£–ô–ù–Ø?

    def go_down(self, floor):
        if self.elevator.min_weight <= self.elevator.current_weight <= self.elevator.max_weight:
            if self.elevator.current_floor == self.elevator.min_floor:
                print("–ù–∏–∂–µ –Ω–µ–∫—É–¥–∞")
            else:
                self.elevator.current_floor -= self.elevator.current_floor - floor

    def get_state(self):
        return "–í –ø—É—Ç–∏ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º"


class IncomingState(ElevatorState):

    def go_to_p(self, floor):
        if elevator.min_floor <= floor <= elevator.max_floor:
            if self.elevator.current_floor == floor:
                print(elevator.get_state())
                self.elevator.state = EmptyState(self.elevator)

            else:
                time.sleep(0.5)
                self.elevator.current_floor = floor
                print(elevator.get_state())
                self.elevator.state = EmptyState(self.elevator)
        else:
            raise ValueError

    def get_state(self):
        return "–ù–∞ –ø—É—Ç–∏ –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É"


class Elevator:
    def __init__(self, min_weight, max_weight, min_floor=0, max_floor=3):  # —Å—É–∫–∞ –ª–∏—Å—Ç ['p', '1', '2', '3']
        self.max_weight = max_weight
        self.min_weight = min_weight
        self.min_floor = min_floor
        self.max_floor = max_floor
        self.current_weight = 0
        self.current_floor = 0
        self.state = EmptyState(self)

    def enter(self, weight):
        self.state.enter(weight)
        print("–¢–µ–∫—É—â–∏–π –≤–µ—Å:", elevator.current_weight)  # –æ–Ω —Ä–∞–∑–≤–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤ –µ–Ω—Ç–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è???

    def exit(self, weight):
        self.state.exit(weight)
        print("–¢–µ–∫—É—â–∏–π –≤–µ—Å:", elevator.current_weight)

    def go_up(self, floor):
        self.state.go_up(floor)
        time.sleep(0.5)
        print("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂:", elevator.current_floor)

    def go_down(self, floor):
        self.state.go_down(floor)
        time.sleep(0.5)
        print("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂:", elevator.current_floor)

    def go_to_p(self, floor):
        self.state.go_to_p(floor)
        time.sleep(0.5)
        print("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂:", elevator.current_floor)

    def get_state(self):
        return self.state.get_state()


#######################################################

elevator = Elevator(min_weight=10, max_weight=500)

#####################################################
print(elevator.get_state())
elevator.go_to_p(1)
#print(elevator.get_state())  # –º—ã –Ω–µ –º–æ–∂–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É —Ç–∫ –º—ã —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ü§∑‚Äç‚ôÇÔ∏è
elevator.enter(420)  # –≤—Ö–æ–¥ —Ç–µ–ª–∞
print(elevator.get_state())
elevator.go_up(2)
print(elevator.get_state())
elevator.go_up(3)
elevator.go_up(5)

print(elevator.get_state())
elevator.exit(420)
print(elevator.get_state())
elevator.go_to_p(2)
#print(elevator.get_state())
elevator.enter(40)
print(elevator.get_state())
elevator.go_down(1)
print(elevator.get_state())
# print("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂:", elevator.current_floor)  # —Å–ø—É—Å–∫–∞–µ–º—Å—è –≤–Ω–∏–∑

elevator.exit(40)
# print("–¢–µ–∫—É—â–∏–π –≤–µ—Å:", elevator.current_weight)  # –≤—ã—Ö–æ–¥ —Ç–µ–ª–∞
print(elevator.get_state())
